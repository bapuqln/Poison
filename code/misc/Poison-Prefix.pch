#ifdef __OBJC__
#import <Cocoa/Cocoa.h>

#if __MAC_OS_X_VERSION_MAX_ALLOWED < 10100
#define NSFullSizeContentViewWindowMask (0)
#warning "Blurred views not available on SDK 10.9 and below."
#warning "NSFullSizeContentViewWindowMask not available on SDK 10.9 and below."
#endif

#define SCApplicationInfoDictKey(k) ([NSBundle mainBundle].infoDictionary[k])
#define SCStringPreference(k) ([[NSUserDefaults standardUserDefaults] stringForKey:k])
#define SCBoolPreference(k) ([[NSUserDefaults standardUserDefaults] boolForKey:k])
#define SCIntegerPreference(k) ([[NSUserDefaults standardUserDefaults] integerForKey:k])

#define SCCodeSigningStatusNoSign  (0)
#define SCCodeSigningStatusOK      (1)
#define SCCodeSigningStatusInvalid (2)

extern uint8_t SCCodeSigningStatus;
extern NSString *SCCodeSigningSigner;

NS_INLINE BOOL SCIsMountainLionOrHigher() {
    return (NSFoundationVersionNumber >= NSFoundationVersionNumber10_8)? YES : NO;
}

NS_INLINE BOOL SCIsMavericksOrHigher() {
    return (NSFoundationVersionNumber >= NSFoundationVersionNumber10_8_4)? YES : NO;
}

NS_INLINE BOOL SCIsYosemiteOrHigher() {
    return (NSAppKitVersionNumber >= 1318.14)? YES : NO;
}

NS_INLINE NSURL *SCApplicationSupportDirectory(void) {
    NSFileManager *fileManager = [NSFileManager defaultManager];
    NSArray *candidates = [fileManager URLsForDirectory:NSApplicationSupportDirectory inDomains:NSUserDomainMask];
    NSURL *returnURL = [(NSURL*)candidates[0] URLByAppendingPathComponent:@"Poison2X" isDirectory:YES];
    BOOL isDirectory = NO;
    BOOL exists = [fileManager fileExistsAtPath:[returnURL path] isDirectory:&isDirectory];
    if (!exists) {
        [fileManager createDirectoryAtURL:returnURL withIntermediateDirectories:YES attributes:nil error:nil];
    } else if (!isDirectory) {
        [fileManager removeItemAtURL:returnURL error:nil];
        [fileManager createDirectoryAtURL:returnURL withIntermediateDirectories:YES attributes:nil error:nil];
    }
    return returnURL;
}

typedef NS_ENUM(NSInteger, SCAvatarMaskShape) {
    SCAvatarMaskShapeCircle = 1,
    SCAvatarMaskShapeSquircle,
    SCAvatarMaskShapeRoundRect,
    SCAvatarMaskShapeSquare,
};

NS_INLINE NSImage *SCAvatarMaskImage(void) {
    NSInteger preferredShape = [[NSUserDefaults standardUserDefaults] integerForKey:@"avatarShape"];
    switch (preferredShape) {
        case SCAvatarMaskShapeCircle:
            return [NSImage imageNamed:@"avatar-mask-circle"];

        case SCAvatarMaskShapeSquircle:
            return [NSImage imageNamed:@"avatar-mask-squircle"];

        case SCAvatarMaskShapeRoundRect:
            return [NSImage imageNamed:@"avatar-mask-roundrect"];

        default:
            return [NSImage imageNamed:@"avatar-mask-square"];
    }
}

typedef NS_ENUM(NSInteger, SCUIStyle) {
    SCUIStyleToxLike,
    SCUIStyleOriginal,
    SCUIStyleInvalid,
};

NS_INLINE SCUIStyle SCCurrentUIStyle(void) {
    NSInteger val = SCIntegerPreference(@"uiStyle");
    if (val >= SCUIStyleInvalid) {
        [[NSUserDefaults standardUserDefaults] setInteger:SCUIStyleOriginal forKey:@"uiStyle"];
        return SCUIStyleOriginal;
    }
    return val;
}

#endif
